---
- name: Get cwd terraform version
  command: "{{ terraform_path }}/terraform --version"
  changed_when: false
  failed_when: false
  register: terraform_check

- name: debug terraform_check
  debug: 
     var: terraform_check
     verbosity: "{{ verbosity_level }}"

- meta: end_play
  when: 
    - terraform_check.stdout is defined
    - terraform_check.stdout.find("Terraform") != -1
    - terraform_force != true

- name: Include OS specific vars
  include_vars: "{{ ansible_os_family }}.yml"

- name: Get latest terraform version from {{ terraform_checkpoint_url }}
  uri:
    url: "{{ terraform_checkpoint_url }}"
    validate_certs: no
  register: terraform_data

- name: Setting version fact
  set_fact:
    terraform_version: "{{ terraform_data.json.current_version | regex_replace ('^v?(.*)$', '\\1') }}"
  when: terraform_version == "latest"

- name: Setting terraform base URL
  set_fact:
    terraform_base_url: "{{ terraform_data.json.current_download_url.split('/')[0:-2]|join('/') }}/{{ terraform_version }}"

- name: Getting terraform chksums
  uri:
    url: "{{ terraform_base_url }}/terraform_{{ terraform_version }}_SHA256SUMS"
    return_content: yes
    validate_certs: no
  register: terraform_shasums

- name: Set chksum search pattern
  set_fact:
    pattern: "(?:.zip\n)?(\\w+)\\s+.*{{ terraform_os }}_{{ terraform_arch }}.zip"

- name: Set terraform_chksum fact
  set_fact:
    terraform_chksum: "sha256:{{ terraform_shasums.content | regex_search(pattern,'\\1') | to_yaml }}"

- name: Setting terraform download URL
  set_fact:
    terraform_download_url: "{{ terraform_base_url }}/{{ terraform_zipfile }}"

- name: Download terraform zip ({{ terraform_zipfile }})
  get_url:
    url: "{{ terraform_download_url }}"
    dest: "{{ terraform_tmp }}"
    checksum: "{{ terraform_chksum }}"
    validate_certs: no

- name: Include tasks for platform
  include_tasks: "{{ ansible_os_family }}.yml"